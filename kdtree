from typing import List
from collections import namedtuple
import time

class Point(namedtuple("Point", "x y")): #Define the tuple point, which has two attributes x and y
    def __repr__(self) -> str:
        return f'Point{tuple(self)!r}'  #Return results.eg:point(x,y) 

class Rectangle(namedtuple("Rectangle", "lower upper")):  #Define the tuple point, which has two attributes
    def __repr__(self) -> str:
        return f'Rectangle{tuple(self)!r}'
    def is_contains(self, p: Point) -> bool:  #Judge whether the point is within the range
        return self.lower.x <= p.x <= self.upper.x and self.lower.y <= p.y <= self.upper.y

class Node(namedtuple("Node", "location left right")):
    def __repr__(self):
        return f'{tuple(self)!r}'

class KDTree:
    def __init__(self):   #Define variables
        self._root = None
        self._n = 0

    def insert(self, p: List[Point],d==0):
        """insert a list of points"""

        if not p : #The list is empty, ending recursion
            return
        if d = 0:     #Split by x, y in turn 
            p = sorted(p,key=lambda x:x.x)     #Define the function to assign the value of x.x to x    
        elif d = 1
            p = sorted(p,key=lambda x:x.y)  
        median=len(p)//2     #Intermediate value found
        median_value=p[median]
        if median_value==p[-1]:    #When the middle value is the same, select one as the root
            median=len(p)-1
        else:
            for i in range(median,len(p)):    #Reduce the position of the value larger than the middle value by one
                if p[i]>median_value:
                    median=i-1
                    break
        if self._n == 0:
            self._n = 1     #Temporarily assign a value, and execute elif after executing once
            self._root=Node(p[median],self.insert(p[:median],1-d),self.insert(p[median+1:],1-d))   #Recursive, the intermediate node is location.The points separated by the middle node continue to be classified at the corresponding edge
        else:
            n=Node(p[median],self.insert(p[:median],1-d),self.insert(p[median+1:],1-d))
            return n    #Return results

    def range(self, rectangle: Rectangle) -> List[Point]:
        """range query"""
        l=[]      #container
        n=self._root
        if n==None:                    #If it is empty, return directly
            return l
        n_lis=[n]
        coordinate_lis=[0]             #0 for x，1 for y，For alternate xy segmentation
        for ind,i in enumerate(n_lis):    #Take out two variables to loop
            if i==None:
                continue
            coordinate=coordinate_lis[ind]
            if coordinate==0:     #Compare according to the size of x. If it is larger than upper.x, it will be retrieved from the left sub-column. If it is smaller than lower.x, it is the same as the previous situation.
                if rectangle.lower.x<=i.location.x<=rectangle.upper.x:
                    n_lis.append(i.right)
                    n_lis.append(i.left)
                    coordinate_lis+=[1-coordinate]*2
                    if rectangle.lower.y<=i.location.y<=rectangle.upper.y:   #When x meets the requirements, check y to see if it is in the area
                        l.append(i.location)
                elif i.location.x<rectangle.lower.x:
                    n_lis.append(i.right)
                    coordinate_lis.append(1-coordinate)
                else :
                    n_lis.append(i.left)
                    coordinate_lis.append(1 - coordinate)
            else:       
                if rectangle.lower.y<=i.location.y<=rectangle.upper.y:  #Compare according to the size of y
                    n_lis.append(i.right)
                    n_lis.append(i.left)
                    coordinate_lis+=[1-coordinate]*2
                    if rectangle.lower.x<=i.location.x<=rectangle.upper.x:
                        l.append(i.location)
                elif i.location.y<rectangle.lower.y:
                    n_lis.append(i.right)
                    coordinate_lis.append(1-coordinate)
                else :
                    n_lis.append(i.left)
                    coordinate_lis.append(1 - coordinate)
        return l

def range_test():
    points = [Point(7, 2), Point(5, 4), Point(9, 6), Point(4, 7), Point(8, 1), Point(2, 3)]
    kd = KDTree()
    kd.insert(points)
    result = kd.range(Rectangle(Point(0, 0), Point(6, 6)))
    assert sorted(result) == sorted([Point(2, 3), Point(5, 4)])

def performance_test():
    points = [Point(x, y) for x in range(1000) for y in range(1000)]

    lower = Point(500, 500)
    upper = Point(504, 504)
    rectangle = Rectangle(lower, upper)
    #  naive method
    start = int(round(time.time() * 1000))
    result1 = [p for p in points if rectangle.is_contains(p)]
    end = int(round(time.time() * 1000))
    print(f'Naive method: {end - start}ms')

    kd = KDTree()
    kd.insert(points)
    # k-d tree
    start = int(round(time.time() * 1000))
    result2 = kd.range(rectangle)
    end = int(round(time.time() * 1000))
    print(f'K-D tree: {end - start}ms')

    assert sorted(result1) == sorted(result2)

if __name__ == '__main__':
    range_test()
    performance_test()
    
    
    
5.伪代码：
Algorithm: get_nearest(self,point) 
input:kdtree and point
output: nearest point
nearest <= self._root 
nearest_dist <= [(nearest.x-point.x)^2+(nearest.y-point.y)^2]#Calculate distance
next <= self._root               
near_nodes <= []     
serach(next, near_nodes) #Search cotyledon   
    
while len(near_nodes) != 0:
    next <= near_nodes[len(near_nodes) - 1]
    near_nodes.pop(len(near_nodes) - 1)
#Detect whether it intersects. If it intersects, it will enter another sub-chain
    if abs(point[next.split] - next.n[next.split] < nearest_dist):
        if point[next.split] <= next.n[next.split]:
            next = next.right
        end
        else:
            next = next.left            
        end
        serach(next, near_nodes)
    end
return nearest
end
